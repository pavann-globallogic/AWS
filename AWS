AMAZON WEB SERVICE

Aws:Aws is a cloud computing platform, that offers variety of services to help business and organization at lower cost and innovate faster. 
It offers services like compute, store, database etc,.

Features Of AWS:

Cost effective (follows pay as you go method)
Scalability and elasticity
Security and compliance
Flexibility

AWS S3:
It is a highly scalable object  storage service that allows you to store data manage data in the cloud.
It supports various types of data like structured,semi-structured and unstructured data.

Key Concepts:
Bucket: it is a container for objects.  Where we can store any number of files.
Object: object is a single file within a bucket
Key: a unique identifier for an object(file path)
Tags: Tags are key-value pairs used to categorize and manage S3 objects.

Key Features:
High availability and duarabilty
S3 automatically replicates across multiple availability  zones
Security
Performance
Cost effective

Boto3:

Boto3 is the official AWS SDK for Python. It's a powerful library that simplifies interactions with various AWS services, including Amazon S3. With Boto3, you can efficiently manage and utilize the vast capabilities of AWS from within your Python applications like like uploading, downloading, and managing objects.

1. create_bucket
Creates a new S3 bucket to store objects.
Use case: Storing static website content, data backups, or application data.
2. delete_bucket
Deletes an empty S3 bucket.
Use case: Removing unused buckets to save storage costs.
3. list_buckets
Lists all S3 buckets associated with your AWS account.
Use case: Managing and monitoring your S3 storage.
4. upload_fileobj
Uploads a file-like object to an S3 bucket.
Use case: Backing up local files, deploying application code, or storing user-generated content.
5. download_fileobj
Downloads an object from an S3 bucket to a file-like object.
Use case: Retrieving files for local processing or analysis.
6. delete_object
Deletes an object from an S3 bucket.
Use case: Removing unwanted or outdated files to save storage costs.
7. list_objects_v2
Lists objects in an S3 bucket.
Use case: Inventorying objects, searching for specific files, or implementing data lifecycle policies.
8. copy_object
Copies an object within or between S3 buckets.
Use case: Creating backups, replicating data across regions, or reorganizing object storage.
9. put_object_acl
Sets the access control list (ACL) for an object.
Use case: Controlling who can access your objects and with what permissions.
10. put_object_tagging
Adds tags to an object.
Use case: Organizing and categorizing objects for easier search and retrieval.
To create s3 session:
import boto3
# Create a session using your AWS credentials
session = boto3.Session(
    aws_access_key_id='YOUR_ACCESS_KEY',
    aws_secret_access_key='YOUR_SECRET_KEY',
    region_name='YOUR_REGION'  # e.g., 'us-west-1'
)
# Connect to the S3 service
s3 = session.resource('s3')

CRUD Operations:

Uploading object into S3:


def upload_file(bucket_name, file_name, object_name=None):
    if object_name is None:
        object_name = file_name
    
    try:
        s3.Bucket(bucket_name).upload_file(file_name, object_name)
        print(f"{file_name} has been uploaded to {bucket_name}/{object_name}")
    except Exception as e:
        print(f"Failed to upload {file_name} to {bucket_name}/{object_name}: {e}")


Downloading a file from S3:

def download_file(bucket_name, object_name, file_name=None):
    if file_name is None:
        file_name = object_name
    
    try:
        s3.Bucket(bucket_name).download_file(object_name, file_name)
        print(f"{object_name} has been downloaded from {bucket_name} to {file_name}")
    except Exception as e:
        print(f"Failed to download {object_name} from {bucket_name}: {e}")

Listing objects in an S3 bucket:

def list_objects(bucket_name):
    try:
        bucket = s3.Bucket(bucket_name)
        for obj in bucket.objects.all():
            print(obj.key)
    except Exception as e:
        print(f"Failed to list objects in {bucket_name}: {e}")


Deleting an object from S3:

def delete_file(bucket_name, object_name):
    try:
        s3.Object(bucket_name, object_name).delete()
        print(f"{object_name} has been deleted from {bucket_name}")
    except Exception as e:
        print(f"Failed to delete {object_name} from {bucket_name}: {e}")


Adding tag to object:

import boto3

s3 = boto3.client('s3')
response = s3.put_object_tagging(
    Bucket='your-bucket-name',
    Key='your-object-key',
    Tagging={'TagSet': [
        {'Key': 'tag1', 'Value': 'value1'},
        {'Key': 'tag2', 'Value': 'value2'},
    ]}
)







