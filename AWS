AMAZON WEB SERVICE

Aws:Aws is a cloud computing platform, that offers variety of services to help business and organization at lower cost and innovate faster. 
It offers services like compute, store, database etc,.

Features Of AWS:

Cost effective (follows pay as you go method)
Scalability and elasticity
Security and compliance
Flexibility
Durability

AWS S3:
It is a highly scalable object  storage service that allows you to store data manage data in the cloud.
It supports various types of data like structured,semi-structured and unstructured data.

Key Concepts:
Bucket: it is a container for objects.  Where we can store any number of files.
Object: object is a single file within a bucket
Key: a unique identifier for an object(file path)
Tags: Tags are key-value pairs used to categorize and manage S3 objects.

Key Features:
High availability and duarabilty
S3 automatically replicates across multiple availability  zones
Security
Performance
Cost effective

IAM (Identity and Access Management) is a service provided by AWS that helps manage access to AWS resources securely. 
It enables users to define and enforce who can access specific resources, and under what conditions, by creating and managing users, groups, roles, and permissions.

Key concepts of IAM:

Users: Individuals or systems that need access to AWS resources.
Groups: Collections of users with the same access permissions.
Roles: AWS entities that define a set of permissions that can be assumed by a user or service.
Policies: Documents that define permissions to perform actions on resources. These can be attached to users, groups, or roles.

Boto3:

Boto3 is the official AWS SDK for Python. It's a powerful library that simplifies interactions with various AWS services, including Amazon S3.
With Boto3, you can efficiently manage and utilize the vast capabilities of AWS from within your Python applications like like uploading, downloading, and managing objects.

Common Boto3 Operations:
1. create_bucket
Creates a new S3 bucket to store objects.
Use case: Storing static website content, data backups, or application data.
2. delete_bucket
Deletes an empty S3 bucket.
Use case: Removing unused buckets to save storage costs.
3. list_buckets
Lists all S3 buckets associated with your AWS account.
Use case: Managing and monitoring your S3 storage.
4. upload_fileobj
Uploads a file-like object to an S3 bucket.
Use case: Backing up local files, deploying application code, or storing user-generated content.
5. download_fileobj
Downloads an object from an S3 bucket to a file-like object.
Use case: Retrieving files for local processing or analysis.
6. delete_object
Deletes an object from an S3 bucket.
Use case: Removing unwanted or outdated files to save storage costs.
7. list_objects_v2
Lists objects in an S3 bucket.
Use case: Inventorying objects, searching for specific files, or implementing data lifecycle policies.
8. copy_object
Copies an object within or between S3 buckets.
Use case: Creating backups, replicating data across regions, or reorganizing object storage.
9. put_object_acl
Sets the access control list (ACL) for an object.
Use case: Controlling who can access your objects and with what permissions.
10. put_object_tagging
Adds tags to an object.
Use case: Organizing and categorizing objects for easier search and retrieval.

Use case: 
Organizing and categorizing objects for easier search and retrieval.
Core API Operations: Ensure the PUT, GET, DELETE, COPY, and LIST operations function as expected for managing objects and buckets.
Access Control & Permissions: Test how IAM roles, ACLs, and bucket policies manage permissions for secure access to S3 resources.
Data Integrity & Versioning: Verify that versioning ensures the accurate retrieval of object versions and maintains data integrity over time.
Error Handling & Response Validation: Evaluate how the API responds to error scenarios, validating correct handling of HTTP error codes like 403, 404, and 500.
Event-Driven Workflows: Test event notifications (e.g., object creation or deletion) to trigger integrations with AWS services like Lambda and SNS.


Conclusion:
Scalable Storage: Provides scalable object storage for any amount of data, accessible globally.
Security: Offers robust security features including IAM roles, bucket policies, ACLs, and encryption options.
API Operations: Supports operations such as PUT (upload), GET (download), DELETE (remove), COPY, and LIST.
Authentication and Authorization: Uses AWS IAM for secure access management and bucket policies to control permissions.
Cost Management: Provides cost-effective storage options, allowing for cost optimization based on access patterns.









